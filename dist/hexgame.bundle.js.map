{"version":3,"file":"hexgame.bundle.js","mappings":"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","sources":["webpack://HexEngine/webpack/universalModuleDefinition","webpack://HexEngine/webpack/bootstrap","webpack://HexEngine/webpack/runtime/define property getters","webpack://HexEngine/webpack/runtime/hasOwnProperty shorthand","webpack://HexEngine/webpack/runtime/make namespace object","webpack://HexEngine/./src/utils/Canvas.js","webpack://HexEngine/./src/utils/Keyboard.js","webpack://HexEngine/./src/utils/Vector.js","webpack://HexEngine/./src/utils/Mouse.js","webpack://HexEngine/./src/entities/Entity.js","webpack://HexEngine/./src/entities/shapes/polygon.js","webpack://HexEngine/./src/utils/Hex.js","webpack://HexEngine/./src/entities/HexCell.js","webpack://HexEngine/./src/utils/Math.js","webpack://HexEngine/./src/HexEngine.js","webpack://HexEngine/./src/core/Game.js","webpack://HexEngine/./src/core/Events.js","webpack://HexEngine/./src/core/Scene.js","webpack://HexEngine/./src/core/Constants.js","webpack://HexEngine/./src/entities/shapes/hexagon.js","webpack://HexEngine/./src/entities/shapes/square.js","webpack://HexEngine/./src/entities/shapes/triangle.js","webpack://HexEngine/./src/entities/text/debug.js","webpack://HexEngine/./src/entities/HexGrid.js","webpack://HexEngine/./src/entities/Animate.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"HexEngine\"] = factory();\n\telse\n\t\troot[\"HexEngine\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nexport default class Canvas {\n\n    static getPixelRatio = function (context) {\n        console.log('Determining pixel ratio.');\n\n        var backingStores = [\n            'webkitBackingStorePixelRatio',\n            'mozBackingStorePixelRatio',\n            'msBackingStorePixelRatio',\n            'oBackingStorePixelRatio',\n            'backingStorePixelRatio'\n        ];\n\n        var deviceRatio = window.devicePixelRatio;\n\n        // Iterate through our backing store props and determine the proper backing ratio.\n        var backingRatio = backingStores.reduce(function (prev, curr) {\n            return (context.hasOwnProperty(curr) ? context[curr] : 1);\n        });\n\n        // Return the proper pixel ratio by dividing the device ratio by the backing ratio\n        return deviceRatio / backingRatio;\n    }\n\n    static generateCanvas = function (w, h) {\n        console.log('Generating canvas.');\n\n        var canvas = document.createElement('canvas'),\n            context = canvas.getContext('2d');\n        // Pass our canvas' context to our getPixelRatio method\n        var ratio = this.getPixelRatio(context);\n\n        // Set the canvas' width then downscale via CSS\n        canvas.width = Math.round(w * ratio);\n        canvas.height = Math.round(h * ratio);\n        canvas.style.width = w + 'px';\n        canvas.style.height = h + 'px';\n\n        // Scale the context so we get accurate pixel density\n        context.setTransform(ratio, 0, 0, ratio, 0, 0);\n\n        return canvas;\n    }\n    \n}\n","export default class Keyboard {\n\n    constructor() {\n\n        window.addEventListener(\"keydown\", (event) => this.handleKeyEvent(event, true), false);\n        window.addEventListener(\"keyup\", (event) => this.handleKeyEvent(event, false), false);\n\n        this.input = {\n            \"UP\": false,\n            \"DOWN\": false,\n            \"LEFT\": false,\n            \"RIGHT\": false\n        };\n    }\n\n    handleKeyEvent(event, pressed) {\n\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        switch (event.key) {\n            case \"w\":\n            case \"W\":\n            case \"Up\":\n            case \"ArrowUp\":\n                this.input.UP = pressed;\n                break;\n\n            case \"s\":\n            case \"S\":\n            case \"Down\":\n            case \"ArrowDown\":\n                this.input.DOWN = pressed;\n                break;\n\n            case \"a\":\n            case \"A\":\n            case \"Left\":\n            case \"ArrowLeft\":\n                this.input.LEFT = pressed;\n                break;\n\n            case \"d\":\n            case \"D\":\n            case \"Right\":\n            case \"ArrowRight\":\n                this.input.RIGHT = pressed;\n                break;\n\n            default:\n                return;\n        }\n\n        // Cancel the default action to avoid it being handled twice\n        event.preventDefault();\n    }\n\n    toString() {\n        return JSON.stringify(this.input);\n    }\n}","/**\n * 2D Vector Library\n */\nexport default class Vector {\n\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    add(v) {\n        return new Vector(\n            this.x + v.x,\n            this.y + v.y\n        )\n    }\n\n    subtract(v) {\n        return new Vector(\n            this.x - v.x,\n            this.y - v.y\n        );\n    }\n\n    scale(scalar) {\n        return new Vector(\n            this.x * scalar,\n            this.y * scalar\n        );\n    }\n\n    dot(v) {\n        return (this.x * v.x) + (this.y * v.y);\n    }\n\n    cross(v) {\n        return new Vector(\n            this.y * v.x - this.x * v.y,\n            this.x * v.y - this.y * v.x\n        )\n    }\n\n    unit() {\n        return this.scale(Math.inv(this.magnitude()))\n    }\n\n    magnitude() {\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n\n    max() {\n        return Math.max(this.x, this.y);\n    }\n\n    min() {\n        return Math.min(this.x, this.y);\n    }\n\n    rotate(theta) {\n        return new Vector(\n            this.x * Math.cos(theta) - this.y * Math.sin(theta),\n            this.x * Math.sin(theta) + this.y * Math.cos(theta)\n        )\n    }\n\n    equals(v) {\n        return this.x == v.x && this.y == v.y;\n    }\n\n    toString() {\n        return `[${this.x}, ${this.y}]`;\n    }\n\n    toArray() {\n        return [this.x, this.y];\n    }\n\n    clone() {\n        return new Vector(this.x, this.y);\n    }\n\n    get length() {\n        return Math.sqrt(this.dot(this));\n    }\n\n}","import Vector from \"./Vector\";\n\nexport default class Mouse {\n    constructor(viewport) {\n        window.addEventListener(\"mousemove\", (event) => this.handleMove(event), false);\n        window.addEventListener(\"mousedown\", (event) => this.handleKeyEvent(event, true), false);\n        window.addEventListener(\"mouseup\", (event) => this.handleKeyEvent(event, false), false);\n        window.addEventListener(\"contextmenu\", (event) => this.handleContextMenu(event), false);\n\n        this.viewport = viewport;\n\n        this.input = {\n            button: {\n                LEFT: false,\n                MIDDLE: false,\n                RIGHT: false,\n            },\n            cursorX: 0,\n            cursorY: 0,\n        };\n    }\n\n    handleKeyEvent(event, pressed) {\n        event = event || window.event;\n        event.preventDefault();\n\n        if (\"which\" in event) {\n            switch (event.which) {\n                case 1:\n                    this.input.button.LEFT = pressed;\n                    break;\n                case 2:\n                    this.input.button.MIDDLE = pressed;\n                    break;\n                case 3:\n                    this.input.button.RIGHT = pressed;\n            }\n        } else if (\"button\" in event) {\n            switch (event.button) {\n                case 0:\n                    this.input.button.LEFT = pressed;\n                    break;\n                case 1:\n                    this.input.button.MIDDLE = pressed;\n                    break;\n                case 2:\n                    this.input.button.RIGHT = pressed;\n                    break;\n            }\n        }\n\n        if (!pressed) {\n            // Do something?\n        }\n    }\n\n    handleMove(event) {\n        event = event || window.event;\n        event.preventDefault();\n\n        this.input.cursorX = event.clientX;\n        this.input.cursorY = event.clientY;\n    }\n\n    handleContextMenu(event) {\n        event = event || window.event;\n        event.preventDefault();\n    }\n\n    getMousePosition() {\n        let rect = this.viewport.getBoundingClientRect();\n        return new Vector(this.input.cursorX - rect.left, this.input.cursorY - rect.top);\n    }\n\n    toString() {\n        return JSON.stringify(this.input);\n    }\n}\n","import Vector from \"../utils/Vector\";\n\n/**\n * Abstract Class Entity\n */\nexport default class Entity {\n    constructor(options) {\n\n        if (this.constructor == 'Entity') {\n            throw new Error(\"Abstract classes can't be instantiated.\")\n        }\n\n        const defaults = {\n            position: new Vector(0, 0)\n        };\n\n        Object.assign(this, defaults, Object.fromEntries(\n            Object.keys(defaults).filter(key => key in options).map(key => [key, options[key]]))\n        );\n\n    }\n\n    update(state) {\n        // Do Nothing\n    }\n\n    draw(ctx) {\n        // Do Nothing\n    }\n\n    get x() {\n        return this.position.x;\n    }\n\n    get y() {\n        return this.position.y;\n    }\n\n}","import Vector from \"../../utils/Vector\";\nimport Entity from \"../Entity\";\n\n/**\n * Abstract Class Polygon\n */\nexport default class Polygon extends Entity {\n\n    constructor(options) {\n        super(options);\n\n        if (this.constructor == 'Polygon') {\n            throw new Error(\"Abstract classes can't be instantiated.\")\n        }\n\n        const defaults = {\n            r: 10,\n            θ: 90 * (Math.PI / 180)\n        };\n\n        Object.assign(this, defaults, Object.fromEntries(\n            Object.keys(defaults).filter(key => key in options).map(key => [key, options[key]]))\n        );\n    }\n\n    getVertices(sides) {\n        const vectors = [];\n        const initVector = new Vector(this.r, 0);\n        for (var i = 0; i < sides; i++) {\n            let vertex = this.position.add(\n                initVector.rotate(i * (2 * Math.PI / sides) + this.θ)\n            );\n            vectors.push(vertex);\n        }\n        return vectors;\n    }\n\n}","\nexport default class Hex {\n\n    constructor(q, r, s) {\n        this.q = q;\n        this.r = r;\n        this.s = s;\n    }\n\n    toString() {\n        return `q:${this.q}|r:${this.r}|s:${this.s}`;\n    }\n\n}\n","import Entity from \"./Entity\";\nimport Vector from \"../utils/Vector.js\";\nimport HexMath from \"../utils/Math.js\";\n\nexport default class HexCell extends Entity {\n    constructor(options) {\n        super(options);\n\n        const defaults = {\n            hex: null,\n            radius: null,\n            center: new Vector(0, 0),\n            fillColor: \"#FFFFFF\",\n            selected: false,\n        };\n\n        Object.assign(this, defaults, Object.fromEntries(\n            Object.keys(defaults).filter(key => key in options).map(key => [key, options[key]])\n        ));\n\n    }\n\n    update(state, parent) {\n\n        if (state.client.frameCount % 5 == 0) {\n            // Calculate the vector of the cell's center\n            let x = this.radius * (Math.sqrt(3) * this.hex.q + (Math.sqrt(3) / 2) * this.hex.r);\n            let y = this.radius * (3 / 2) * this.hex.r;\n            this.center = parent.position.add(new Vector(x, y));\n        }\n\n        // Determine if the mouse pointer is inside the cell, if so, color the cell\n        let vertices = this.getVertices(this.center);\n        let point = state.mouse.getMousePosition();\n\n        let pointInPoly = HexMath.pointInPoly(vertices, point);\n\n        if (pointInPoly) {\n            if (this.lastMouseButtonState == true && state.mouse.input.button.LEFT == false) {\n                this.selected = !this.selected;\n            }\n\n            this.lastMouseButtonState = state.mouse.input.button.LEFT;\n        }\n\n        let isSelected = this.selected;\n\n        if (pointInPoly && isSelected) {\n            this.color = \"#3C5BC3\";\n        } else if (pointInPoly && !isSelected) {\n            this.color = \"#C1993E\";\n        } else if (isSelected) {\n            this.color = \"#637CCF\";\n        } else {\n            this.color = \"#CDAD65\"\n        }\n\n    }\n\n    draw(ctx) {\n        // Use the vertices to draw the hexagon\n        ctx.beginPath();\n        ctx.fillStyle = this.color;\n        for (let vertex of this.getVertices(this.center)) {\n            ctx.lineTo(vertex.x, vertex.y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    }\n\n    getVertices(center) {\n        let vertices = [];\n        const baseVector = new Vector(this.radius, 0);\n        for (var i = 0; i < 6; i++) {\n            let vertex = center.add(baseVector.rotate(i * ((2 * Math.PI) / 6) + 30 * (Math.PI / 180)));\n            vertices.push(vertex);\n        }\n        return vertices;\n    }\n\n}\n","\nexport default class HexMath {\n\n    /**\n     * Determines if a point lies within the set of vertices of a polygon\n     *\n     * @param Vector[] vertices\n     * @param Vector point\n     * @returns boolean\n     * @link http://alienryderflex.com/polygon/\n     */\n    static pointInPoly(vertices, point) {\n        let inPoly = false;\n        let v = vertices;\n        let p = point;\n        for (let i = 0, j = v.length - 1; i < v.length; i++) {\n            let m1 = v[i].y < p.y && v[j].y >= p.y;\n            let m2 = v[j].y < p.y && v[i].y >= p.y;\n            let m3 = v[i].x <= p.x || v[j].x < p.x;\n            if ((m1 || m2) && m3) {\n                let n1 = v[i].x;\n                let n2 = p.y - v[i].y;\n                let n3 = v[j].y - v[i].y;\n                let n4 = v[j].x - v[i].x;\n                inPoly ^= n1 + (n2 / n3) * n4 < p.x;\n            }\n            j = i;\n        }\n        return inPoly;\n    }\n}","\n/*\n|--------------------------------------------------------------------------\n| Export Core Objects\n|--------------------------------------------------------------------------\n*/\nimport Game from './core/Game.js';\nimport Events from './core/Events.js';\nimport Scene from './core/Scene.js';\nimport { Constants } from './core/Constants.js';\n\nexport const core = {\n    \"Game\": Game,\n    \"Events\": Events,\n    \"Scene\": Scene,\n    \"constants\": Constants,\n};\n\n\n/*\n|--------------------------------------------------------------------------\n| Export Entity Objects\n|--------------------------------------------------------------------------\n*/\nimport Entity from './entities/Entity.js';\nimport Polygon from './entities/shapes/polygon.js';\nimport Hexagon from './entities/shapes/hexagon.js';\nimport Square from './entities/shapes/square.js';\nimport Triangle from './entities/shapes/triangle.js';\nimport Debug from './entities/text/debug.js';\nimport HexGrid from './entities/HexGrid.js';\nimport HexCell from './entities/HexCell.js';\nimport Animate from './entities/Animate.js';\n\nexport const entities = {\n    \"entity\": Entity,\n    \"shapes\": {\n        \"Polygon\": Polygon,\n        \"Hexagon\": Hexagon,\n        \"Square\": Square,\n        \"Triangle\": Triangle,\n    },\n    \"text\": {\n        \"Debug\": Debug,\n    },\n    \"HexGrid\": HexGrid,\n    \"HexCell\": HexCell,\n    \"Animate\": Animate,\n};\n\n/*\n|--------------------------------------------------------------------------\n| Export Utils Objects\n|--------------------------------------------------------------------------\n*/\nimport Canvas from './utils/Canvas.js';\nimport Hex from './utils/Hex.js';\nimport Mouse from './utils/Mouse.js';\nimport Keyboard from './utils/Keyboard.js';\nimport Vector from './utils/Vector.js';\n\nexport const utils = {\n    \"Canvas\": Canvas,\n    \"Hex\": Hex,\n    \"Mouse\": Mouse,\n    \"Keyboard\": Keyboard,\n    \"Vector\": Vector,\n};\n","import Canvas from \"../utils/Canvas.js\";\nimport Keyboard from \"../utils/Keyboard.js\";\nimport Mouse from \"../utils/Mouse.js\";\n\nexport default class Game {\n\n    constructor(w, h, fps, container) {\n\n        this.config = {\n            width: w,\n            height: h,\n            targetFps: fps,\n        };\n\n        this.viewport = Canvas.generateCanvas(this.config.width, this.config.height);\n        this.context = this.viewport.getContext(\"2d\");\n        container.insertBefore(this.viewport, container.firstChild);\n\n        this.state = {\n            status: \"running\",\n            client: {\n                curFPS: 0,\n                frameCount: 0,\n                lastFPSUpdate: 0,\n                framesThisSecond: 0,\n                tick: 1000 / fps,\n                lastGameTick: 0,\n                nextGameTick: 0,\n            },\n            entities: [],\n            keyboard: new Keyboard(),\n            mouse: new Mouse(this.viewport),\n        };\n\n    }\n\n    init() {\n        this.state.entities = [];\n        this.frameid = window.requestAnimationFrame(this.gameTick.bind(this));\n    }\n\n    gameTick(timestamp) {\n\n        if (this.state.status == \"paused\") {\n            cancelAnimationFrame(this.frameid);\n        }\n\n        if (timestamp > this.state.client.nextGameTick) {\n            this.state.client.nextGameTick += this.state.client.tick;\n            this.state.client.frameCount++;\n            this.update(timestamp);\n            this.draw();\n        }\n\n        this.state.client.lastGameTick = timestamp;\n        this.frameid = window.requestAnimationFrame(this.gameTick.bind(this));\n\n    }\n\n    update(timestamp) {\n\n        // Measure how many frames were rendering each loop\n        if (timestamp > this.state.client.lastFPSUpdate + 1000) {\n            this.state.client.curFPS = this.state.client.framesThisSecond;\n            this.state.client.lastFPSUpdate = timestamp;\n            this.state.client.framesThisSecond = 0;\n        } else {\n            this.state.client.framesThisSecond++;\n        }\n\n        // Update all the entities\n        for (let entity of this.state.entities) {\n            entity.update(this.state);\n        }\n    }\n\n    draw() {\n        // Clear the canvas\n        this.context.clearRect(0, 0, this.config.width, this.config.height);\n\n        // Draw all the entities\n        for (let entity of this.state.entities) {\n            entity.draw(this.context);\n        }\n    }\n\n    appendTo() {\n        // @TODO?\n    }\n}\n","export default class Events {\n\n    constructor() {\n        this.events = {};\n    }\n\n    on(name, callback) {\n\n        if (!this.events.hasOwnProperty(name)) {\n            this.events[name] = [];\n        }\n\n        this.events[name].push(callback);\n\n    }\n\n    off(name, callback) {\n\n        if (this.events.hasOwnProperty(name)) {\n            const events = [];\n            for (const handler of this.events[name]) {\n                if (callback !== handler) {\n                    events.push(handler)\n                }\n            }\n            this.events = events;\n        }\n\n    }\n\n    trigger(name, ...args) {\n\n        if (this.events.hasOwnProperty(name)) {\n            for (const callback of this.events.name) {\n                callback.apply(this, args);\n            }\n        }\n\n    }\n\n}","export default class Scene {\n    \n    constructor() {\n        this.entities = [];\n    }\n\n    start() {\n        this.frameid = window.requestAnimationFrame(this.gameTick.bind(this));\n    }\n\n    tick(timestamp) {\n        if (this.state.status == \"paused\") {\n            cancelAnimationFrame(this.frameid);\n        }\n    }\n\n    update(timestamp) {\n        for (let entity of this.entities) {\n            entity.update(this.state);\n        }\n    }\n\n    draw() {\n        for (let entity of this.entities) {\n            entity.draw(this.context);\n        }\n    }\n\n}","export const Constants = {\n    \"PI\": 3.14159\n}","import Polygon from \"./polygon\";\n\n/**\n * \n */\nexport default class Hexagon extends Polygon {\n\n    constructor(position, radius, degrees = 0) {\n        super(position, radius, degrees)\n        this.sides = 6;\n    }\n\n    update(state) {\n        this.θ = (this.θ - (Math.PI / 120)) % (2 * Math.PI);\n    }\n\n    draw(ctx) {\n        ctx.beginPath();\n        for (let vertex of this.getVertices(this.sides)) {\n            ctx.lineTo(vertex.x, vertex.y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n}\n","import Vector from \"../../utils/Vector\";\nimport Polygon from \"./polygon\";\n\n/**\n * \n */\nexport default class Square extends Polygon {\n\n    constructor(options) {\n        super(options);\n\n        const defaults = {\n            sides: 4,\n        };\n\n        Object.assign(this, defaults, Object.fromEntries(\n            Object.keys(defaults).filter(key => key in options).map(key => [key, options[key]]))\n        );\n    }\n\n    update(state) {\n\n\n        // this.θ = (this.θ - (Math.PI / 60)) % (2 * Math.PI);\n\n\n        const movements = [];\n        let velocity = 1;\n\n        if (state.keyboard.input.LEFT) {\n            movements.push(new Vector(velocity * -1, 0));\n        }\n\n        if (state.keyboard.input.RIGHT) {\n            movements.push(new Vector(velocity, 0));\n        }\n\n        if (state.keyboard.input.UP) {\n            movements.push(new Vector(0, velocity * -1));\n        }\n\n        if (state.keyboard.input.DOWN) {\n            movements.push(new Vector(0, velocity));\n        }\n\n        const nextMove = movements.reduce((prev, current) => {\n            return prev.add(current);\n        }, new Vector(0, 0));\n\n        this.position = this.position.add(nextMove);\n\n        // if (state.client.frameCount % 5 == 0) {\n        //     if (this.position.x < 100) {\n        //         this.position = this.position.add(new Vector(5, 0));\n        //     } else {\n        //         this.position = new Vector(20, 20);\n        //     }\n        // }\n\n    }\n\n    draw(ctx) {\n        ctx.beginPath();\n        ctx.fillStyle = \"#a1b2c3\";\n        for (let vertex of this.getVertices(this.sides)) {\n            ctx.lineTo(vertex.x, vertex.y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    }\n\n}\n","import Vector from \"../../utils/Vector\";\nimport Polygon from \"./polygon\";\n\n/**\n * \n */\nexport default class Triangle extends Polygon {\n\n    constructor(position, radius, degrees = 0) {\n        super(position, radius, degrees)\n        this.sides = 3;\n    }\n\n    update(state) {\n        this.θ = (this.θ + (Math.PI / 30)) % (2 * Math.PI);\n        this.r = 30 + 15 * Math.sin((360 / 60) * (state.client.frameCount % 60) * (Math.PI / 180));\n        this.position = this.position.add(\n            new Vector(2 * Math.sin((state.client.frameCount % 360) * (Math.PI / 180)), 0)\n        )\n    }\n\n    draw(ctx) {\n        ctx.beginPath();\n        for (let vertex of this.getVertices(this.sides)) {\n            ctx.lineTo(vertex.x, vertex.y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n}\n","import Entity from \"../Entity\";\n\nexport default class Debug extends Entity {\n    constructor(options) {\n\n        super(options)\n\n        const defaults = {\n            label: '',\n            value: '',\n            callback: null\n        };\n\n        Object.assign(this, defaults, Object.fromEntries(\n            Object.keys(defaults).filter(key => key in options).map(key => [key, options[key]]))\n        );\n\n    }\n\n    update(state) {\n        if (typeof this.callback == \"function\") {\n            this.value = this.callback.call();\n        }\n    }\n\n    draw(ctx) {\n        ctx.font = 'px Arial';\n        ctx.fillStyle = 'black';\n        ctx.fillText(this.toString(), this.position.x, this.position.y);\n    }\n\n    toString() {\n        return `${this.label}: ${this.value}`;\n    }\n\n}","import Entity from \"./Entity\";\nimport Vector from \"../utils/Vector\";\nimport Hex from \"../utils/Hex\";\nimport HexCell from \"./HexCell\";\n\n/**\n *\n */\nexport default class HexGrid extends Entity {\n    constructor(options) {\n\n        super(options);\n\n        const defaults = {\n            cellPadding: 0,\n            cellRadius: 0,\n            columns: 15,\n            rows: 10,\n            cells: [],\n        };\n\n        Object.assign(this, defaults, Object.fromEntries(\n            Object.keys(defaults).filter(key => key in options).map(key => [key, options[key]]))\n        );\n\n        this.build(this.columns, this.rows);\n\n    }\n\n    build(columns, rows) {\n        this.cells = [];\n        for (let r = 0; r < rows; r++) {\n            let offset = Math.floor(r / 2);\n            for (let q = -offset; q < columns - offset; q++) {\n                this.cells.push(\n                    new HexCell({\n                        hex: new Hex(q, r, -q - r),\n                        radius: this.cellRadius\n                    })\n                );\n            }\n        }\n    }\n\n    /**\n     * Draw a hexagon at each of the coordinate from the origin\n     * \n     * @param {*} ctx \n     */\n    draw(ctx) {\n        for (let cell of this.cells) {\n            cell.draw(ctx);\n        }\n    }\n\n    /**\n     * Loop through each and determine if we need to color or highlight it\n     * @param {*} context \n     */\n    update(context) {\n        for (let cell of this.cells) {\n            cell.update(context, this);\n        }\n    }\n}\n","import Entity from \"./Entity\";\nimport Vector from \"../utils/Vector\";\n\nexport default class Animate extends Entity {\n\n    constructor(options) {\n        super(options);\n\n        const defaults = {\n\n        };\n\n        Object.assign(this, defaults, Object.fromEntries(\n            Object.keys(defaults).filter(key => key in options).map(key => [key, options[key]])\n        ));\n\n        this.img = new Image();\n        this.load();\n    }\n\n    load() {\n\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', 'http://localhost:8080/src/assets/img/megaman.png', true);\n\n        xhr.responseType = 'blob';\n\n        // Process the response when the request is ready.\n        xhr.onload = e => {\n            let that = e.target;\n            if (that.status == 200) {\n                let blob = that.response;\n                this.img.src = window.URL.createObjectURL(blob);\n            }\n        };\n\n        xhr.send();\n    }\n\n    update(state, parent) {\n\n    }\n\n    draw(ctx) {\n\n        let position = { 'x': 1, 'y': 1 };\n        let width = 21;\n        let height = 24;\n\n        let frame = this.frame ?? 0;\n        let nextFrame = this.nextFrame ?? 0;\n        let framePos = this.framePos ?? 0;\n\n        let frames = [\n            [66, 1, 24, 24],\n            [91, 1, 16, 24],\n            [108, 1, 21, 24],\n            [91, 1, 16, 24]\n        ];\n\n        frame++;\n\n        if (this.img.complete) {\n            \n            if(frame >= nextFrame) {\n                framePos = (framePos + 1) % 4;\n                nextFrame = frame + 15;\n            }\n\n            let i = framePos;\n            ctx.drawImage(this.img, \n                frames[i][0], frames[i][1], frames[i][2], frames[i][3],\n                position.x, position.y, frames[i][2], frames[i][3],\n            );\n            \n        }\n\n        this.framePos = framePos;\n        this.frame = frame;\n        this.nextFrame = nextFrame;\n\n    }\n\n}"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Canvas","static","context","console","log","window","devicePixelRatio","reduce","prev","curr","w","h","canvas","document","createElement","getContext","ratio","this","getPixelRatio","width","Math","round","height","style","setTransform","Keyboard","constructor","addEventListener","event","handleKeyEvent","input","pressed","defaultPrevented","UP","DOWN","LEFT","RIGHT","preventDefault","toString","JSON","stringify","Vector","x","y","add","v","subtract","scale","scalar","dot","cross","unit","inv","magnitude","sqrt","pow","max","min","rotate","theta","cos","sin","equals","toArray","clone","length","Mouse","viewport","handleMove","handleContextMenu","button","MIDDLE","cursorX","cursorY","which","clientX","clientY","getMousePosition","rect","getBoundingClientRect","left","top","Entity","options","Error","defaults","position","assign","fromEntries","keys","filter","map","update","state","draw","ctx","Polygon","super","r","PI","getVertices","sides","vectors","initVector","i","vertex","push","Hex","q","s","HexCell","hex","radius","center","fillColor","selected","parent","client","frameCount","vertices","point","mouse","pointInPoly","inPoly","p","j","m1","m2","m3","lastMouseButtonState","isSelected","color","beginPath","fillStyle","lineTo","closePath","stroke","fill","baseVector","core","fps","container","config","targetFps","generateCanvas","insertBefore","firstChild","status","curFPS","lastFPSUpdate","framesThisSecond","tick","lastGameTick","nextGameTick","entities","keyboard","init","frameid","requestAnimationFrame","gameTick","bind","timestamp","cancelAnimationFrame","entity","clearRect","appendTo","events","on","name","callback","off","handler","trigger","args","apply","start","degrees","movements","velocity","nextMove","current","label","font","fillText","cellPadding","cellRadius","columns","rows","cells","build","offset","floor","cell","img","Image","load","xhr","XMLHttpRequest","open","responseType","onload","e","that","target","blob","response","src","URL","createObjectURL","send","frame","nextFrame","framePos","frames","complete","drawImage","utils"],"sourceRoot":""}