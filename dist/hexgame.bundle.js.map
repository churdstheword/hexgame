{"version":3,"sources":["webpack://hexgame/webpack/universalModuleDefinition","webpack://hexgame/./src/core/client.js","webpack://hexgame/./src/entities/HexCell.js","webpack://hexgame/./src/entities/HexGrid.js","webpack://hexgame/./src/entities/entity.js","webpack://hexgame/./src/entities/shapes/hexagon.js","webpack://hexgame/./src/entities/shapes/polygon.js","webpack://hexgame/./src/entities/shapes/square.js","webpack://hexgame/./src/entities/shapes/triangle.js","webpack://hexgame/./src/entities/text/debug.js","webpack://hexgame/./src/utils/Hex.js","webpack://hexgame/./src/utils/Keyboard.js","webpack://hexgame/./src/utils/Mouse.js","webpack://hexgame/./src/utils/Vector.js","webpack://hexgame/./src/utils/utils.canvas.js","webpack://hexgame/webpack/bootstrap","webpack://hexgame/webpack/runtime/define property getters","webpack://hexgame/webpack/runtime/hasOwnProperty shorthand","webpack://hexgame/webpack/runtime/make namespace object"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;;;;;;;;;ACV0D;AAClB;AACY;AACE;AACJ;AACJ;AACF;AACC;AACP;;AAEvB;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0BAA0B,uDAAQ;AAClC,uBAAuB,oDAAK;AAC5B;;AAEA,wBAAwB,sEAAc;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,4DAAK,KAAK,qDAAM;AAChC;AACA,aAAa;AACb;AACA;AACA,gBAAgB,4DAAK,KAAK,qDAAM;AAChC;AACA,aAAa;AACb;AACA;AACA,gBAAgB,4DAAK,KAAK,qDAAM;AAChC;AACA,aAAa;AACb;AACA;AACA,gBAAgB,4DAAK,KAAK,qDAAM;AAChC;AACA,aAAa;AACb;;AAEA,qCAAqC,yDAAO,KAAK,qDAAM;;AAEvD;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChHwC;;AAEzB;AACf;AACA;AACA;;AAEA;AACA,wBAAwB,qDAAM;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wDAAwD,qDAAM;AAC9D;;AAEA;AACA;AACA,wBAAwB,qDAAM;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,qDAAM;AACrC,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,cAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3E8B;AACO;AACN;AACC;;AAEhC;AACA;AACA;AACe,sBAAsB,4CAAM;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,uBAAuB;AAC9C;AACA,iCAAiC,+BAA+B;AAChE,0CAA0C,6CAAO,KAAK,+CAAG;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzCqC;;AAErC;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,kDAAM;AAChC,8BAA8B,kDAAM;AACpC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,C;;;;;;;;;;;;;;;AC5BgC;;AAEhC;AACA;AACA;AACe,sBAAsB,6CAAO;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACzBwC;AACT;;AAE/B;AACA;AACA;AACe,sBAAsB,4CAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,kDAAM;AACrC,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,C;;;;;;;;;;;;;;;AC5BgC;;AAEhC;AACA;AACA;AACe,qBAAqB,6CAAO;;AAE3C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACzBwC;AACR;;AAEhC;AACA;AACA;AACe,uBAAuB,6CAAO;;AAE7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,kDAAM;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AC9B+B;;AAEhB,oBAAoB,4CAAM;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,WAAW,IAAI,WAAW;AAC5C;;AAEA,C;;;;;;;;;;;;;;;ACzBe;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO,KAAK,OAAO,KAAK,OAAO;AACnD;;AAEA;;;;;;;;;;;;;;;ACbe;;AAEf;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;AC9De;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACe;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO,IAAI,OAAO;AACrC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,C;;;;;;;;;;;;;;;;ACpFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;UCzCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E","file":"hexgame.bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hexgame\"] = factory();\n\telse\n\t\troot[\"hexgame\"] = factory();\n})(self, function() {\nreturn ","import { generateCanvas } from \"../utils/utils.canvas.js\";\nimport Vector from \"../utils/Vector.js\";\nimport Hexagon from \"../entities/shapes/hexagon.js\";\nimport Triangle from \"../entities/shapes/triangle.js\";\nimport Square from \"../entities/shapes/square.js\";\nimport Debug from \"../entities/text/debug.js\";\nimport Keyboard from \"../utils/Keyboard.js\";\nimport HexGrid from \"../entities/HexGrid.js\";\nimport Mouse from \"../utils/Mouse.js\";\n\nexport default class Client {\n    constructor(w, h, fps, container) {\n        this.config = {\n            width: w,\n            height: h,\n            targetFps: fps,\n        };\n\n        this.state = {\n            status: \"running\",\n            client: {\n                curFPS: 0,\n                frameCount: 0,\n                lastFPSUpdate: 0,\n                framesThisSecond: 0,\n                tick: 1000 / fps,\n                nextGameTick: new Date().getTime(),\n            },\n            entities: [],\n            keyboard: new Keyboard(),\n            mouse: new Mouse(),\n        };\n\n        this.viewport = generateCanvas(this.config.width, this.config.height);\n        this.context = this.viewport.getContext(\"2d\");\n        container.insertBefore(this.viewport, container.firstChild);\n    }\n\n    init() {\n        this.state.entities = [];\n        //this.state.entities.push(new Hexagon(new Vector(100, 100), 100, 0));\n        //this.state.entities.push(new Triangle(new Vector(250, 250), 50, 15));\n        //this.state.entities.push(new Square(new Vector(350, 100), 75, 25));\n\n        this.state.entities.push(\n            new Debug(new Vector(10, 30), \"FPS\", () => {\n                return this.state.client.curFPS;\n            })\n        );\n        this.state.entities.push(\n            new Debug(new Vector(10, 50), \"Frames\", () => {\n                return this.state.client.frameCount;\n            })\n        );\n        this.state.entities.push(\n            new Debug(new Vector(10, 70), \"keysPressed\", () => {\n                return this.state.keyboard.toString();\n            })\n        );\n        this.state.entities.push(\n            new Debug(new Vector(10, 90), \"mouse\", () => {\n                return this.state.mouse.toString();\n            })\n        );\n\n        this.state.entities.push(new HexGrid(new Vector(25, 120), 15));\n\n        this.loop();\n    }\n\n    loop() {\n        this.frameid = window.requestAnimationFrame(this.loop.bind(this));\n\n        let time = new Date().getTime();\n\n        if (time > this.state.client.nextGameTick) {\n            this.state.client.nextGameTick += this.state.client.tick;\n            this.state.client.frameCount++;\n            this.update(time);\n            this.draw();\n        }\n\n        if (this.state.status == \"paused\") {\n            cancelAnimationFrame(this.frameid);\n        }\n    }\n\n    update(timestamp) {\n        // Measure how many frames were rendering each loop\n        if (timestamp > this.state.client.lastFPSUpdate + 1000) {\n            this.state.client.curFPS = this.state.client.framesThisSecond;\n            this.state.client.lastFPSUpdate = timestamp;\n            this.state.client.framesThisSecond = 0;\n        } else {\n            this.state.client.framesThisSecond++;\n        }\n\n        // Update all the entities\n        for (let entity of this.state.entities) {\n            entity.update(this.state);\n        }\n    }\n\n    draw() {\n        // Clear the canvas\n        this.context.clearRect(0, 0, this.config.width, this.config.height);\n\n        // Draw all the entities\n        for (let entity of this.state.entities) {\n            entity.draw(this.context);\n        }\n    }\n}\n","import Vector from \"../utils/Vector.js\";\n\nexport default class HexCell {\n    constructor(hex, size) {\n        this.hex = hex;\n        this.size = size;\n\n        this.state = {\n            center: new Vector(0, 0),\n            fillColor: \"#FFFFFF\",\n        };\n    }\n\n    update(state, parent) {\n        if (state.client.frameCount % 5 == 0) {\n            // Calculate the vector of the cell's center\n            let x = this.size * (Math.sqrt(3) * this.hex.q + (Math.sqrt(3) / 2) * this.hex.r);\n            let y = this.size * (3 / 2) * this.hex.r;\n            this.state.center = parent.position.add(new Vector(x, y));\n        }\n\n        // Determine if the mouse position is inside the cell\n        let vertices = this.getVertices(this.state.center);\n        let point = new Vector(state.mouse.input.cursorX, state.mouse.input.cursorY);\n        this.state.color = this.pointInPoly(vertices, point) ? \"#28d45e\" : \"#FFFFFF\";\n    }\n\n    draw(ctx) {\n        // Use the vertices to draw the hexagon\n        ctx.beginPath();\n        ctx.fillStyle = this.state.color;\n        for (let vertex of this.getVertices(this.state.center)) {\n            ctx.lineTo(vertex.x, vertex.y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n        ctx.fill();\n    }\n\n    getVertices(center) {\n        let vertices = [];\n        const baseVector = new Vector(this.size, 0);\n        for (var i = 0; i < 6; i++) {\n            let vertex = center.add(baseVector.rotate(i * ((2 * Math.PI) / 6) + 30 * (Math.PI / 180)));\n            vertices.push(vertex);\n        }\n        return vertices;\n    }\n\n    /**\n     * Determines if a point lies within a set of vertices of a polygon\n     *\n     * @param Vector[] vertices\n     * @param Vector point\n     * @returns boolean\n     */\n    pointInPoly(vertices, point) {\n        let inPoly = false;\n        let v = vertices;\n        let p = point;\n        for (let i = 0, j = v.length - 1; i < v.length; i++) {\n            let m1 = v[i].y < p.y && v[j].y >= p.y;\n            let m2 = v[j].y < p.y && v[i].y >= p.y;\n            let m3 = v[i].x <= p.x || v[j].x < p.x;\n            if ((m1 || m2) && m3) {\n                let n1 = v[i].x;\n                let n2 = p.y - v[i].y;\n                let n3 = v[j].y - v[i].y;\n                let n4 = v[j].x - v[i].x;\n                inPoly ^= n1 + (n2 / n3) * n4 < p.x;\n            }\n            j = i;\n        }\n        return inPoly;\n    }\n}\n","import Entity from \"./entity\";\nimport Vector from \"../utils/Vector\";\nimport Hex from \"../utils/Hex\";\nimport HexCell from \"./HexCell\";\n\n/**\n *\n */\nexport default class HexGrid extends Entity {\n    constructor(position, size) {\n        super(position);\n        this.size = size;\n\n        this.state = {\n            width: 20,\n            height: 15,\n            cells: [],\n        };\n\n        // Build a map for debugging\n        for (let r = 0; r < this.state.height; r++) {\n            let offset = Math.floor(r / 2);\n            for (let q = -offset; q < this.state.width - offset; q++) {\n                this.state.cells.push(new HexCell(new Hex(q, r, -q - r), size));\n            }\n        }\n    }\n\n    draw(ctx) {\n        // Draw a hexagon at each of the coordinate from the origin\n        for (let cell of this.state.cells) {\n            cell.draw(ctx);\n        }\n    }\n\n    update(state) {\n        // Loop through each and determine if we need to color or highlight it\n        for (let cell of this.state.cells) {\n            cell.update(state, this);\n        }\n    }\n}\n","import Vector from \"../utils/Vector\";\n\n/**\n * Abstract Class Entity\n */\nexport default class Entity {\n    constructor(position) {\n        if (this.constructor == 'Entity') {\n            throw new Error(\"Abstract classes can't be instantiated.\")\n        }\n        this.position = position;\n\n        this.state = {\n            position: position,\n            velocity: new Vector(0,0),\n            acceleration: new Vector(0,0),\n        }\n\n    }\n\n    update(state) {\n        // Do Nothing\n    }\n\n    draw(ctx) {\n        // Do Nothing\n    }\n\n}","import Polygon from \"./polygon\";\n\n/**\n * \n */\nexport default class Hexagon extends Polygon {\n\n    constructor(position, radius, degrees = 0) {\n        super(position, radius, degrees)\n        this.sides = 6;\n    }\n\n    update(state) {\n        this.θ = (this.θ - (Math.PI / 120)) % (2 * Math.PI);\n    }\n\n    draw(ctx) {\n        ctx.beginPath();\n        for (let vertex of this.getVertices(this.sides)) {\n            ctx.lineTo(vertex.x, vertex.y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n}\n","import Vector from \"../../utils/Vector\";\nimport Entity from \"../entity\";\n\n/**\n * Abstract Class Polygon\n */\nexport default class Polygon extends Entity {\n    constructor(position, radius, degrees) {\n        super(position)\n        if (this.constructor == 'Polygon') {\n            throw new Error(\"Abstract classes can't be instantiated.\")\n        }\n        this.r = radius;\n        this.θ = degrees * (Math.PI / 180);\n    }\n\n    getVertices(sides) {\n        const vectors = [];\n        const initVector = new Vector(this.r, 0);\n        for (var i = 0; i < sides; i++) {\n            let vertex = this.position.add(\n                initVector.rotate(i * (2 * Math.PI / sides) + this.θ)\n            );\n            vectors.push(vertex);\n        }\n        return vectors;\n    }\n\n}","import Polygon from \"./polygon\";\n\n/**\n * \n */\nexport default class Square extends Polygon {\n\n    constructor(position, radius, degrees = 0) {\n        super(position, radius, degrees)\n        this.sides = 4;\n    }\n\n    update(state) {\n        this.θ = (this.θ - (Math.PI / 60)) % (2 * Math.PI);\n    }\n\n    draw(ctx) {\n        ctx.beginPath();\n        for (let vertex of this.getVertices(this.sides)) {\n            ctx.lineTo(vertex.x, vertex.y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n}\n","import Vector from \"../../utils/Vector\";\nimport Polygon from \"./polygon\";\n\n/**\n * \n */\nexport default class Triangle extends Polygon {\n\n    constructor(position, radius, degrees = 0) {\n        super(position, radius, degrees)\n        this.sides = 3;\n    }\n\n    update(state) {\n        this.θ = (this.θ + (Math.PI / 30)) % (2 * Math.PI);\n        this.r = 30 + 15 * Math.sin((360 / 60) * (state.client.frameCount % 60) * (Math.PI / 180));\n        this.position = this.position.add(\n            new Vector(2 * Math.sin((state.client.frameCount % 360) * (Math.PI / 180)), 0)\n        )\n    }\n\n    draw(ctx) {\n        ctx.beginPath();\n        for (let vertex of this.getVertices(this.sides)) {\n            ctx.lineTo(vertex.x, vertex.y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n}\n","import Entity from \"../entity\";\n\nexport default class Debug extends Entity {\n    constructor(position, label, field) {\n        super(position)\n        this.field = field;\n        this.label = label;\n        this.value = '';\n    }\n\n    update(state) {\n        if (typeof this.field == \"function\") {\n            this.value = this.field.call();\n        }\n    }\n\n    draw(ctx) {\n        ctx.font = '16px Arial';\n        ctx.fillStyle = 'black';\n        ctx.fillText(this.toString(), this.position.x, this.position.y);\n    }\n\n    toString() {\n        return `${this.label}: ${this.value}`;\n    }\n\n}","\nexport default class Hex {\n\n    constructor(q, r, s) {\n        this.q = q;\n        this.r = r;\n        this.s = s;\n    }\n\n    toString() {\n        return `q:${this.q}|r:${this.r}|s:${this.s}`;\n    }\n\n}\n","export default class Keyboard {\n\n    constructor() {\n\n        window.addEventListener(\"keydown\", (event) => this.handleKeyEvent(event, true), false);\n        window.addEventListener(\"keyup\", (event) => this.handleKeyEvent(event, false), false);\n\n        this.input = {\n            \"UP\": false,\n            \"DOWN\": false,\n            \"LEFT\": false,\n            \"RIGHT\": false\n        };\n    }\n\n\n    handleKeyEvent(event, pressed) {\n\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        switch (event.key) {\n            case \"w\":\n            case \"W\":\n            case \"Up\":\n            case \"ArrowUp\":\n                this.input.UP = pressed;\n                break;\n\n            case \"s\":\n            case \"S\":\n            case \"Down\":\n            case \"ArrowDown\":\n                this.input.DOWN = pressed;\n                break;\n\n            case \"a\":\n            case \"A\":\n            case \"Left\":\n            case \"ArrowLeft\":\n                this.input.LEFT = pressed;\n                break;\n\n            case \"d\":\n            case \"D\":\n            case \"Right\":\n            case \"ArrowRight\":\n                this.input.RIGHT = pressed;\n                break;\n\n            default:\n                return;\n        }\n\n        // Cancel the default action to avoid it being handled twice\n        event.preventDefault();\n    }\n\n    toString() {\n        return JSON.stringify(this.input);\n    }\n}","export default class Mouse {\n    constructor() {\n        window.addEventListener(\"mousemove\", (event) => this.handleMove(event), false);\n        window.addEventListener(\"mousedown\", (event) => this.handleKeyEvent(event, true), false);\n        window.addEventListener(\"mouseup\", (event) => this.handleKeyEvent(event, false), false);\n        window.addEventListener(\"contextmenu\", (event) => this.handleContextMenu(event), false);\n\n        this.input = {\n            button: {\n                LEFT: false,\n                MIDDLE: false,\n                RIGHT: false,\n            },\n            cursorX: 0,\n            cursorY: 0,\n        };\n    }\n\n    handleKeyEvent(event, pressed) {\n        event = event || window.event;\n        event.preventDefault();\n\n        if (\"which\" in event) {\n            switch (event.which) {\n                case 1:\n                    this.input.button.LEFT = pressed;\n                    break;\n                case 2:\n                    this.input.button.MIDDLE = pressed;\n                    break;\n                case 3:\n                    this.input.button.RIGHT = pressed;\n            }\n        } else if (\"button\" in event) {\n            switch (event.button) {\n                case 0:\n                    this.input.button.LEFT = pressed;\n                    break;\n                case 1:\n                    this.input.button.MIDDLE = pressed;\n                    break;\n                case 2:\n                    this.input.button.RIGHT = pressed;\n                    break;\n            }\n        }\n\n        if (!pressed) {\n            // Do something?\n        }\n    }\n\n    handleMove(event) {\n        event = event || window.event;\n        event.preventDefault();\n\n        this.input.cursorX = event.clientX;\n        this.input.cursorY = event.clientY;\n    }\n\n    handleContextMenu(event) {\n        event = event || window.event;\n        event.preventDefault();\n    }\n\n    toString() {\n        return JSON.stringify(this.input);\n    }\n}\n","/**\n * 2D Vector Library\n */\nexport default class Vector {\n\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    add(v) {\n        return new Vector(\n            this.x + v.x,\n            this.y + v.y\n        )\n    }\n\n    subtract(v) {\n        return new Vector(\n            this.x - v.x,\n            this.y - v.y\n        );\n    }\n\n    scale(scalar) {\n        return new Vector(\n            this.x * scalar,\n            this.y * scalar\n        );\n    }\n\n    dot(v) {\n        return (this.x * v.x) + (this.y * v.y);\n    }\n\n    cross(v) {\n        return new Vector(\n            this.y * v.x - this.x * v.y,\n            this.x * v.y - this.y * v.x\n        )\n    }\n\n    unit() {\n        return this.scale(Math.inv(this.magnitude()))\n    }\n\n    magnitude() {\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n\n    max() {\n        return Math.max(this.x, this.y);\n    }\n\n    min() {\n        return Math.min(this.x, this.y);\n    }\n\n    rotate(theta) {\n        return new Vector(\n            this.x * Math.cos(theta) - this.y * Math.sin(theta),\n            this.x * Math.sin(theta) + this.y * Math.cos(theta)\n        )\n    }\n\n    equals(v) {\n        return this.x == v.x && this.y == v.y;\n    }\n\n    toString() {\n        return `[${this.x}, ${this.y}]`;\n    }\n\n    toArray() {\n        return [this.x, this.y];\n    }\n\n    clone() {\n        return new Vector(this.x, this.y);\n    }\n\n    get length() {\n        return Math.sqrt(this.dot(this));\n    }\n\n}","\nconst getPixelRatio = function (context) {\n    console.log('Determining pixel ratio.');\n\n    var backingStores = [\n        'webkitBackingStorePixelRatio',\n        'mozBackingStorePixelRatio',\n        'msBackingStorePixelRatio',\n        'oBackingStorePixelRatio',\n        'backingStorePixelRatio'\n    ];\n\n    var deviceRatio = window.devicePixelRatio;\n\n    // Iterate through our backing store props and determine the proper backing ratio.\n    var backingRatio = backingStores.reduce(function (prev, curr) {\n        return (context.hasOwnProperty(curr) ? context[curr] : 1);\n    });\n\n    // Return the proper pixel ratio by dividing the device ratio by the backing ratio\n    return deviceRatio / backingRatio;\n}\n\nconst generateCanvas = function (w, h) {\n    console.log('Generating canvas.');\n\n    var canvas = document.createElement('canvas'),\n        context = canvas.getContext('2d');\n    // Pass our canvas' context to our getPixelRatio method\n    var ratio = getPixelRatio(context);\n\n    // Set the canvas' width then downscale via CSS\n    canvas.width = Math.round(w * ratio);\n    canvas.height = Math.round(h * ratio);\n    canvas.style.width = w + 'px';\n    canvas.style.height = h + 'px';\n\n    // Scale the context so we get accurate pixel density\n    context.setTransform(ratio, 0, 0, ratio, 0, 0);\n\n    return canvas;\n}\n\nexport { getPixelRatio, generateCanvas }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}